{"name":"SaC","tagline":".:[ Small and Crunchy :: Minifying Asset Server ]:.","body":"Small and Crunchy\r\n=================\r\n\r\nSaC is a tiny service to take big things and make them small. It accepts requests for minified CSS or JS files, expects to find non-minified copies on-disk, and serves up the minified one you asked it for.\r\n\r\nInstallation\r\n------------\r\n\r\n    npm install -g sac\r\n\r\nUsage\r\n-----\r\n\r\n    sac\r\n\r\nSeriously, that's it (unless you need to change the defaults, see the section on \"[Configuration](//github.com/colstrom/sac#configuration)\").\r\n\r\nSaC will launch, check the number of cores on your system, and spawn a minion for each core. It will then listen on port 40480 and accept requests for any resource ending in .min.js, or .min.css. When it gets a request, it will find the unminified file version, and respond with a minified copy.\r\n\r\nExample\r\n-------\r\n\r\nAssuming default configuration...\r\n\r\n    curl http://localhost:40480/scripts/jquery.min.js\r\n\r\nSaC looks for jquery.js at /data/www/docroot/scripts/jquery.js\r\n\r\nIf it exists, /usr/bin/r.js is called and the result is returned in the response body with a 200 status in the header. Content-Type is set to either application/javascript or text/css, depending on the content.\r\n\r\nHTTP Status Codes\r\n-----------------\r\n\r\nSaC will return reasonably sane HTTP status codes with most responses.\r\n\r\n* 200: Success\r\n  * This is the expected response, when everything goes as planned.\r\n* 403: Forbidden\r\n  * SaC will refuse requests for non-minified resources. It is a minifying asset server, after all.\r\n* 404: Not Found\r\n  * The file doesn't exist under the configured docroot.\r\n* 415: Unsupported Media Type\r\n  * The requested asset isn't of a supported type.\r\n* 418: I'm a teapot.\r\n  * Request did not include a specific resource. Asking to minify nothing is an interesting concept.\r\n* 501: Unable to Comply\r\n  * This generally happens when requirejs cannot be invoked.\r\n\r\nConfiguration\r\n-------------\r\n\r\nSaC has some (not many) configurable options, mostly to accomodate systems that don't line up with the defaults. These are all passed in as runtime arguments.\r\n\r\n**docroot** _(default: /data/www/docroot)_\r\n\r\nThis is where SaC expects to find the canonical assets.\r\n\r\n    sac --docroot </path/to/docroot>\r\n\r\n**port** _(default: 40480)_\r\n\r\nThe port SaC will listen on for connections (a web-accessible status page can be found at (port + 1)).\r\n\r\nAttempting to bind to a port below 1024 will require root, and is generally advised against.\r\n\r\n    sac --port <1025-65534>\r\n\r\n**requirejs** _(default: /usr/bin/r.js)_\r\n\r\nSince SaC uses requirejs to minify content, it needs to know where to find it. This may vary by operating system and configuration.\r\n* On most Linux systems, requirejs installs to '/usr/bin/r.js' via npm. This is the default assumption.\r\n* On BSD derivatives (including OSX), it is usually found at /usr/local/bin/r.js.\r\n* On Solaris and derivatives (including SmartOS), it's probably somewhere else (/opt/local/bin/r.js or something along those lines).\r\n* If you're not sure where to find it, and SaC is responding with an [HTTP 501](//github.com/colstrom/sac#http-status-codes), you can check with 'which r.js'.\r\n\r\n    sac --requirejs /usr/local/bin/r.js\r\n","google":"UA-2308591-12","note":"Don't delete this file! It's used internally to help with page regeneration."}